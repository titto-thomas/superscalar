--IITB RISC superscalar processor---
--Regfile Module(2to1)---
-- author: Anakha
-----------------------description of entity---------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity testbench is 
end entity;

architecture behave of testbench is 
component regfile is 
port (
   clock  : in std_logic;
   reset  : in std_logic;
   InA1    : in std_logic_vector(2 downto 0); 		--address for selecting A 
   InB1    : in std_logic_vector(2 downto 0); 		--address for selecting B 
   outA1  : out std_logic_vector(19 downto 0); 		--read the data , 1st operand
   outB1  : out std_logic_vector(19 downto 0);		--read the data , 2nd operand
   

   InA2    : in std_logic_vector(2 downto 0); 		--address for selecting A 
   InB2    : in std_logic_vector(2 downto 0); 		--address for selecting B 
   outA2  : out std_logic_vector(19 downto 0); 		--read the data , 1st operand
   outB2  : out std_logic_vector(19 downto 0);		--read the data , 2nd operand
   

   data_out_RRF  : in std_logic_vector(15 downto 0); 	--result from RRF-to update the RRF at the retire stage
   tag_field_RRF  : in std_logic_vector(2 downto 0); 	--serve as the write address identification
   WritEn_ROB : in std_logic; 				---enable for writing controlled by ROB
 
   -----tag update section----
   tag_in1 : in std_logic_vector(2 downto 0);
   tag_in2 : in std_logic_vector(2 downto 0);
   

   dest_addr1 : in std_logic_vector(2 downto 0);
   dest_addr2 : in std_logic_vector(2 downto 0);
   tag_en1 : in std_logic; 				---tag_en1 or tag_en2 ----
   tag_en2 : in std_logic 				----tag_enable 2 
   
);
end component;
signal clock: std_logic:='0';
signal reset : std_logic;
signal InA1, InB1, InA2, InB2 : std_logic_vector(2 downto 0);
signal outA1, outB1, outA2, outB2 : std_logic_vector(19 downto 0);
signal data_out_RRF : std_logic_vector(15 downto 0);
signal tag_field_RRF : std_logic_vector(2 downto 0);
signal WritEn_ROB : std_logic;
signal tag_in1, tag_in2 : std_logic_vector(2 downto 0);
signal dest_addr1, dest_addr2 : std_logic_vector(2 downto 0);
signal tag_en1, tag_en2 : std_logic;
signal busy_renamer1, busy_renamer2 : std_logic;
begin

clock<= not clock after 5 ns;

ARF : regfile port map(clock, reset, InA1, InB1, outA1, outB1, InA2, InB2, outA2, outB2, data_out_RRF, tag_field_RRF, WritEn_ROB, tag_in1, tag_in2, dest_addr1, dest_addr2, tag_en1, tag_en2);

process
begin
reset <='1';
InA1 <= "000";
InB1 <= "000";
InA2 <= "000";
InB2 <= "000";
data_out_RRF <= X"0000";
tag_field_RRF <= "000";
WritEn_RoB <= '0';
tag_in1 <= "000";
tag_in2 <= "000";
dest_addr1 <= "000";
dest_addr2 <= "000";
tag_en1 <='0';
tag_en2 <='0';

wait for 20 ns;
reset<='0';


tag_en1 <='1';
tag_en2 <='1';
dest_addr1 <= "001";
dest_addr2 <= "101";
tag_in1 <= "011";
tag_in2 <= "110" ;
wait for 20 ns;

tag_en1 <='1';
tag_en2 <='1';
dest_addr1 <= "010";
dest_addr2 <= "110";
tag_in1 <= "100";
tag_in2 <= "111" ;
wait for 20 ns;
tag_en1 <='0';
tag_en2 <= '0';
InA1<= "001";
InB1 <= "010";
InA2 <= "101";
InB2 <= "110";
wait for 20 ns;
InA1 <="000";
InB1 <= "000";
InA2 <="000";
InB2 <= "000";
WritEn_ROB <= '1';
tag_field_RRF <= "111" ; ---see outA2, outB2---R6
data_out_RRF <= X"1234";
wait for 20 ns;
InA1 <="000";
InB1 <= "000";
InA2 <="000";
InB2 <= "000";
WritEn_ROB <= '1';
tag_field_RRF <= "100" ;
data_out_RRF <= X"ABCD";
wait for 20 ns;
WritEn_ROB <= '1';
tag_field_RRF <= "011" ;
data_out_RRF <= X"4567";
wait for 20 ns;
InA1 <="000";
InB1 <= "000";
InA2 <="000";
InB2 <= "000";
WritEn_ROB <= '1';
tag_field_RRF <= "110" ;
data_out_RRF <= X"89AB";
wait for 20 ns;
WritEn_ROB <='0';
InA1 <= "001";
InB1 <= "010";
InA2 <= "101";
InB2 <= "110";


wait for 500 ns;









end process;
end behave;

